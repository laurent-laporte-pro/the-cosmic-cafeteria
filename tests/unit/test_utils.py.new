"""
Unit tests for utility functions in the Cosmic Cafeteria API.
"""
import unittest
from unittest.mock import patch, MagicMock
import datetime

from src.api.utils import format_date, validate_planet_name, calculate_order_total


class TestDateFormatters(unittest.TestCase):
    """Unit tests for date formatting functions."""
    
    def test_format_date(self):
        """Test formatting a date to string."""
        test_date = datetime.datetime(2025, 5, 9, 12, 30, 45)
        formatted = format_date(test_date)
        self.assertEqual(formatted, "2025-05-09")
    
    def test_format_date_with_custom_format(self):
        """Test formatting a date with a custom format string."""
        test_date = datetime.datetime(2025, 5, 9, 12, 30, 45)
        formatted = format_date(test_date, "%Y/%m/%d %H:%M")
        self.assertEqual(formatted, "2025/05/09 12:30")
    
    def test_format_date_with_none(self):
        """Test formatting None as an empty string."""
        formatted = format_date(None)
        self.assertEqual(formatted, "")


class TestPlanetNameValidator(unittest.TestCase):
    """Unit tests for planet name validation."""
    
    def test_validate_planet_name_valid(self):
        """Test validating a valid planet name."""
        valid_names = [
            "Earth",
            "Mars",
            "Jupiter",
            "Alpha Centauri",
            "New Earth-5"
        ]
        
        for name in valid_names:
            with self.subTest(name=name):
                self.assertTrue(validate_planet_name(name))
    
    def test_validate_planet_name_invalid(self):
        """Test validating invalid planet names."""
        invalid_names = [
            "",  # Empty
            "a",  # Too short
            "earth",  # Lowercase first letter
            "Earth!",  # Invalid character
            "12345",  # No letters
            "Planet@Home"  # Invalid character
        ]
        
        for name in invalid_names:
            with self.subTest(name=name):
                self.assertFalse(validate_planet_name(name))


class TestOrderCalculations(unittest.TestCase):
    """Unit tests for order calculations."""
    
    @patch('src.api.utils.Meal')
    def test_calculate_order_total(self, mock_meal):
        """Test calculating the total for an order."""
        # Setup mock
        mock_meal_instance = MagicMock()
        mock_meal_instance.price = 10.99
        mock_meal.query.get.return_value = mock_meal_instance
        
        # Test calculation
        total = calculate_order_total(meal_id=1, quantity=3)
        
        # Assertions
        expected_total = 10.99 * 3
        self.assertEqual(total, expected_total)
        mock_meal.query.get.assert_called_once_with(1)
    
    @patch('src.api.utils.Meal')
    def test_calculate_order_total_with_invalid_meal(self, mock_meal):
        """Test calculating the total with an invalid meal ID."""
        # Setup mock to return None (meal not found)
        mock_meal.query.get.return_value = None
        
        # Test calculation with invalid meal ID
        with self.assertRaises(ValueError):
            calculate_order_total(meal_id=999, quantity=2)


if __name__ == '__main__':
    unittest.main()
